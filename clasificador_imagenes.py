# -*- coding: utf-8 -*-
"""Clasificador Imagenes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3EHAGgjbRICb6p_-zpbguZOWhDWgDMw
"""

from tensorflow import keras
from tensorflow.keras.utils import to_categorical
from tensorflow.keras import regularizers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D, Flatten, Dense, Dropout, Activation, BatchNormalization
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint

import numpy as np
import matplotlib.pyplot as plt

"""Carga del data set"""

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Cantidad de datos en train 50,000 imagnes de 32 x 32 de 3 modulos a color
x_train.shape

plt.imshow(x_train[45])

"""Limpieza de datos"""

# pasamos a float32 y dividimos entre 255
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

#Obtenemos el numero de clases que hay en la salida // hay 10 tipos de clases
num_classes = np.unique(y_train).shape[0]
num_classes

# convertimos la salida escalar a un arreglo
y_train = to_categorical(y_train, num_classes)
y_test = to_categorical(y_test, num_classes)

y_train[0]

"""Normalizacion"""

x_train/=255
x_test/=255

"""Creando set de datos de entrenamiento y validacion"""

(x_train,x_valid) = x_train[10000:] , x_train[:10000]
(y_train,y_valid) = y_train[10000:] , y_train[:10000]

"""Contruyendo nuestros modelos convolucionales"""

def convolucional1(filtros,df,regulatizer):

  model = Sequential()

  #Conv1
  model.add(Conv2D(filtros,(3,3),padding='same',kernel_regularizer=regularizers.l2(regulatizer),input_shape=df.shape[1:]))
  model.add(Activation('relu'))

  #conv2
  model.add(Conv2D(filtros,(3,3),padding='same'))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))



  #conv3
  model.add(Conv2D(2*filtros,(3,3),padding='same'))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))
  model.add(Dropout(0.1))

  #conv4
  model.add(Conv2D(2*filtros,(3,3),padding='same'))
  model.add(Activation('relu'))
  model.add(Dropout(0.2))

  #conv5
  model.add(Conv2D(4*filtros,(3,3),padding='same'))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))
  model.add(Dropout(0.2))

  #conv6
  model.add(Conv2D(4*filtros,(3,3),padding='same'))
  model.add(Activation('relu'))
  model.add(MaxPooling2D(pool_size=(2,2)))
  model.add(Dropout(0.2))

  #clasificacion y flatten
  model.add(Flatten())
  model.add(Dense(10,activation='softmax'))

  return model

model = convolucional1(32,x_train,8e-5)

"""compilando"""

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

"""Entrenamiento"""

hist = model.fit(x_train, y_train, batch_size=64,epochs=50,
               validation_data=(x_valid, y_valid),
               verbose=2, shuffle=True)

"""Resultados"""

plt.plot(hist.history['accuracy'],label='Train')
plt.plot(hist.history['val_accuracy'],label='Val')
plt.legend()
plt.show()





