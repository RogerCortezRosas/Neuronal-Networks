# -*- coding: utf-8 -*-
"""perros-vs-gatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uarjpx47GNhqauzs1ovXT9OEv_vGedOH

## Importando librerías
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense ,BatchNormalization,ReLU,Input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from  tensorflow.keras import models, optimizers, regularizers

"""## Creación del modelo convolucional"""

def model1():
    model = models.Sequential([
    Input(shape=(150,150,3)),
    Conv2D(32, (3,3),padding='same'),
    ReLU(),
    MaxPooling2D((2,2)),

    Conv2D(64, (3,3),padding='same'),
    ReLU(),
    MaxPooling2D((2,2)),

    Conv2D(128, (3,3),padding='same'),
    ReLU(),
    MaxPooling2D((2,2)),

    Conv2D(128, (3,3),padding='same'),
    ReLU(),
    MaxPooling2D((2,2)),

    Flatten(),
    Dropout(0.5),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')
                                      ])


    return model

"""## Data augmentation"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
    )

"""## Reescalar los datos"""

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory('/content/drive/MyDrive/Leccion Python/Deep_Learning/data/cats_and_dogs/train',
                                 target_size=(150,150),
                                 batch_size=32,
                                 class_mode='binary'
                                 )

validation_generator = test_datagen.flow_from_directory('/content/drive/MyDrive/Leccion Python/Deep_Learning/data/cats_and_dogs/validation',
                                 target_size=(150,150),
                                 batch_size=32,
                                 class_mode='binary'
                                 )

"""## Callbacks"""

checkpoint = ModelCheckpoint('modelo_perros_gatos.keras',monitor='val_accuracy', verbose= 1, save_best_only=True)

"""## Compilando el modelo"""

model1 = model1()

model1.compile(loss='binary_crossentropy', optimizer =optimizers.Adam(),
             metrics=['accuracy'])

"""## Entrenando el modelo"""

hist = model1.fit(train_generator, steps_per_epoch=2000//32,
                epochs=100,
                validation_data=validation_generator,
                 validation_steps= 1000//32,
                 callbacks=[checkpoint])

"""## Resultados"""

import matplotlib.pyplot as plt

plt.plot(hist.history['accuracy'], label = 'Train')
plt.plot(hist.history['val_accuracy'], label = 'Val')
plt.legend()
plt.show()

test_generator = test_datagen.flow_from_directory('/content/drive/MyDrive/Leccion Python/Deep_Learning/data/cats_and_dogs/test',
                                 target_size=(150,150),
                                 batch_size=32,
                                 class_mode='binary'
                                 )

model1.load_weights('./modelo_perros_gatos.keras')

model1.evaluate(test_generator)

"""### Modelo 2"""

def model2():

        model =models.Sequential([

# Input -----------------------------
        Input(shape=(150,150,3)),
#Convolucion 1 --------------------------------
        Conv2D(32, (3,3),padding='same'),
        BatchNormalization(),
        ReLU(),
        MaxPooling2D((2,2)),
        Dropout(0.2),

#Convolucion 2 --------------------------------
        Conv2D(32, (3,3),padding='same'),
        BatchNormalization(),
        ReLU(),
        MaxPooling2D((2,2)),
        Dropout(0.3),

#Convolucion 3 --------------------------------
        Conv2D(64, (3,3),padding='same'),
        BatchNormalization(),
        ReLU(),
        MaxPooling2D((2,2)),
        Dropout(0.4),

#Convolucion 4 --------------------------------
        Conv2D(128, (3,3),padding='same'),
        BatchNormalization(),
        ReLU(),
        MaxPooling2D((2,2)),
        Dropout(0.5),
#Convolucion 5 --------------------------------
        Conv2D(256, (3,3),padding='same'),
        BatchNormalization(),
        ReLU(),
        MaxPooling2D((2,2)),
        Dropout(0.5),
#Aplanado 1 Dimension--------------------------------
        Flatten(),
 # Capas de clasificacion ----------------------
        Dense(512, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')

    ])





        return model

"""### CheckPoint"""

checkpoint2 = ModelCheckpoint('modelo_perros_gatos_2.keras',monitor='val_accuracy', verbose= 1, save_best_only=True)

"""### Insanciamos el modelo"""

model2 = model2()

"""### Compilacion"""

model2.compile(loss='binary_crossentropy',optimizer = optimizers.Adam(learning_rate=0.001), metrics = ['accuracy'])

"""### Entrenamiento"""

hist2 = model2.fit(train_generator,
                steps_per_epoch=2000//64,
                epochs = 100,
                validation_data = validation_generator,
                validation_steps = 1000//64,
                callbacks = [checkpoint2]
                )

plt.plot(hist2.history['accuracy'], label = 'Train')
plt.plot(hist2.history['val_accuracy'], label = 'Val')
plt.legend()
plt.show()

model2.load_weights('./modelo_perros_gatos_2.keras')

model2.evaluate(test_generator)